def chair2binary(aichar):
    return bin(ord(aichar))[2:]  # –£–±–∏—Ä–∞–µ–º '0b'

def binary2chair(binary_str):
    return chr(int(binary_str, 2))  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–≤–æ–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Å–∏–º–≤–æ–ª

def string2binary(aistring):
    return ''.join(map(chair2binary, aistring))  # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ 7-–±–∏—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏

def binary2string(binary_str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª–∏–Ω–∞ –∫—Ä–∞—Ç–Ω–∞ 7
    remainder = len(binary_str) % 7
    if remainder != 0:
        pad = 7 - remainder
        binary_str += '0' * pad
        print(f"[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] –°—Ç—Ä–æ–∫–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∞ {pad} –Ω—É–ª—è–º–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ 7 —Å–∏–º–≤–æ–ª–æ–≤
    chunks = [binary_str[i:i+7] for i in range(0, len(binary_str), 7)]

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
    return ''.join(map(binary2chair, chunks))


source = 'hello'
binary = string2binary(source)
result = binary2string(binary)

print("–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:", source)
print("–ë–∏–Ω–∞—Ä–Ω—ã–π –≤–∏–¥:", binary)
print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è:", result)


# –¢–∞–∫–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–º–µ–µ—Ç –¥–ª–∏–Ω—É 20 ‚Üí –Ω–µ –∫—Ä–∞—Ç–Ω–æ 7 ‚Üí –±—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∞ –¥–æ 21
test_binary = '11010001100101110110011'
restored = binary2string(test_binary)
print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–∑ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π:", restored)


'''
–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: hello
–ë–∏–Ω–∞—Ä–Ω—ã–π –≤–∏–¥: 11010001100101110110011011001101111
–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è: hello
[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] –°—Ç—Ä–æ–∫–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∞ 5 –Ω—É–ª—è–º–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–∑ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π: hel`
'''


def string2binary(s):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –±–∏–Ω–∞—Ä–Ω—É—é —Å—Ç—Ä–æ–∫—É (–ø–æ 8 –±–∏—Ç –Ω–∞ —Å–∏–º–≤–æ–ª)"""
    return ''.join(f"{byte:08b}" for byte in s.encode('utf-8'))

def binary2string(binary_str):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
    remainder = len(binary_str) % 8
    if remainder != 0:
        pad_bits = 8 - remainder
        binary_str += '0' * pad_bits
        print(f"[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] –°—Ç—Ä–æ–∫–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∞ {pad_bits} –Ω—É–ª—è–º–∏.")
    
    byte_data = bytes(int(binary_str[i:i+8], 2) for i in range(0, len(binary_str), 8))
    return byte_data.decode('utf-8', errors='replace')

if __name__ == "__main__":
    original_text = "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! Hello, world! üòä"
    print("–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:", original_text)

    # –ö–æ–¥–∏—Ä—É–µ–º –≤ –±–∏–Ω–∞—Ä–Ω—É—é —Å—Ç—Ä–æ–∫—É
    binary_str = string2binary(original_text)
    print("\n–ë–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):\n", binary_str[:100] + "...")

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    restored_text = binary2string(binary_str)
    print("\n–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:")
    print(restored_text)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    print("\n–°–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∏?",
          "‚úÖ" if original_text == restored_text else "‚ùå")


    # print(string2binary('Hello')) # 0100100001100101011011000110110001101111

'''
–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! Hello, world! üòä

–ë–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):
 1101000010011111110100011000000011010000101110001101000010110010110100001011010111010001100000100010...

–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:
–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! Hello, world! üòä

–°–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∏? ‚úÖ
'''